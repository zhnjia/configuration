"set runtimepath+=~/.vim,~/.vim/after
"set packpath+=~/.vim
"source ~/.vimrc

" ==================== Plugin ===================
call plug#begin('~/.local/share/vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
" Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
" Plug 'Valloric/YouCompleteMe'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
" Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
" Plug 'tomasr/molokai' "theme
Plug 'joshdick/onedark.vim'
Plug 'itchyny/lightline.vim'
" Plug 'altercation/vim-colors-solarized'
Plug 'vim-scripts/a.vim'
Plug 'godlygeek/tabular'
Plug 'udalov/kotlin-vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
" Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'ntpeters/vim-better-whitespace'
" Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-vinegar'
" Plug 'Shougo/denite.nvim'
" Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'kristijanhusak/defx-icons'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'ludovicchabant/vim-gutentags'
Plug 'terryma/vim-expand-region'
" google
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
" Plug 'liuchengxu/space-vim-dark'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'jamespwilliams/bat.vim'
Plug 'rust-lang/rust.vim'
Plug 'airblade/vim-gitgutter'
call plug#end()

" =================== Basic configuration ====================
" set number
set expandtab
set showmatch
set scrolloff=3
set nosmarttab
set softtabstop=4
set shiftwidth=4
set tabstop=4
set nobackup
set hlsearch
set cursorline
set background=dark
set ignorecase
set hidden
set mouse=a
set guicursor=
" set autochdir
"set tags=./tags
syntax on

" ==== theme ====
"if (has("termguicolors"))
set termguicolors
"endif
"colorscheme onedark
colorscheme onedark
let g:lightline = {
            \ 'colorscheme': 'onedark',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'gitbranch', 'readonly', 'relativepath', 'modified' ] ]
            \ },
            \ 'component_function': {
            \   'gitbranch': 'FugitiveHead'
            \ },
            \ }
let g:onedark_termcolors=256
let g:onedark_terminal_italics=1

" GUI Options
set guioptions-=T

nmap j gj
nmap k gk
imap <C-f> <Right>
imap <C-e> <ESC>$A

let mapleader=","

" ==== relative number ====
set number relativenumber


" ==================== fzf configuration ====================
" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~30%' }

" In Neovim, you can set up fzf window using a Vim command
" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': '-tabnew' }
" let g:fzf_layout = { 'window': '10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 2

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], [preview window], [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Bat: https://github.com/sharkdp/bat
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
" command! -bang -nargs=* Rg
  " \ call fzf#vim#rg(<q-args>,
  " \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  " \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  " \                 <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" command! -bang -nargs=+ -complete=dir Ag call fzf#vim#ag_raw(<q-args>, <bang>0)
" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" key map
nmap <leader>H :History<CR>
nmap <leader>G :GFiles<CR>
nmap <leader>g :GGrep<CR>
nmap <leader>c :GGrep <C-R>=expand("<cword>")<CR><CR>
" nmap <leader>F :FZF<CR>
nmap <leader>F :Files<CR>
" nmap <leader>f :FZF %:p:h<CR>
nmap <leader>f :Files %:p:h<CR>
nmap <leader>A :Ag<CR>
nmap <leader>R :Rg<CR>
nmap <leader>B :Buffers<CR>
nmap <leader>S :BLines<CR>
nmap <C-S>     :BLines<CR>
nmap <leader>W :Windows<CR>
nmap <F3>      :Rg <C-R>=expand("<cword>")<CR><CR>
nmap <C-x>g    :Gstatus<CR>
nmap <leader>T :BTags<CR>
nmap <leader>C :Commands<CR>


" ultisnips
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" ===== Tagbar =====
nmap <F8> :TagbarToggle<CR>
let g:tagbar_position = 'leftabove vertical'
let g:tagbar_ctags_bin = "/usr/local/bin/ctags"
"autocmd FileType python,c,cpp,java,st TagbarOpen

" ===== NERDComment =====
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" ===== auto trim empty space line =====
"autocmd BufWritePre * :%s/\s\+$//e

" let g:python_host_prog='/usr/bin/python'
" let g:python3_host_prog='/usr/bin/python3'

" ===== air-line =====
" let g:airline#extensions#vimagit#enabled = 1
" let g:airline_theme='monokai_tasty'

" ==== cpp-enhanced-highlight ====
" let g:cpp_class_scope_highlight = 1
" let g:cpp_member_variable_highlight = 1
" let g:cpp_class_decl_highlight = 1

" ==== StripWhitespace ====
let g:strip_whitespace_on_save = 1

" ==== syntastic ====
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" ==== NERDTree ====
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" let g:NERDTreeChDirMode = 2

" ==== netrw ====
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 3
let g:netrw_altv = 1
let g:netrw_winsize = 25

" java
" autocmd filetype java UpdateTags Defx
" call defx#custom#option('_', {
"       \ 'winwidth': 30,
"       \ 'split': 'vertical',
"       \ 'direction': 'topleft',
"       \ 'show_ignored_files': 0,
"       \ 'buffer_name': '',
"       \ 'toggle': 1,
"       \ 'resume': 1
"       \ })
"
" autocmd FileType defx call s:defx_my_settings()
" function! s:defx_my_settings() abort
"     " Define mappings
"     nnoremap <silent><buffer><expr> <CR>
"                 \ defx#do_action('open')
"     nnoremap <silent><buffer><expr> c
"                 \ defx#do_action('copy')
"     nnoremap <silent><buffer><expr> m
"                 \ defx#do_action('move')
"     nnoremap <silent><buffer><expr> p
"                 \ defx#do_action('paste')
"     nnoremap <silent><buffer><expr> l
"                 \ defx#do_action('open')
"     nnoremap <silent><buffer><expr> E
"                 \ defx#do_action('open', 'vsplit')
"     nnoremap <silent><buffer><expr> P
"                 \ defx#do_action('preview')
"     nnoremap <silent><buffer><expr> o
"                 \ defx#do_action('open_tree', 'toggle')
"     nnoremap <silent><buffer><expr> K
"                 \ defx#do_action('new_directory')
"     nnoremap <silent><buffer><expr> N
"                 \ defx#do_action('new_file')
"     nnoremap <silent><buffer><expr> M
"                 \ defx#do_action('new_multiple_files')
"     nnoremap <silent><buffer><expr> C
"                 \ defx#do_action('toggle_columns',
"                 \                'mark:indent:icon:filename:type:size:time')
"     nnoremap <silent><buffer><expr> S
"                 \ defx#do_action('toggle_sort', 'time')
"     nnoremap <silent><buffer><expr> d
"                 \ defx#do_action('remove')
"     nnoremap <silent><buffer><expr> r
"                 \ defx#do_action('rename')
"     nnoremap <silent><buffer><expr> !
"                 \ defx#do_action('execute_command')
"     nnoremap <silent><buffer><expr> x
"                 \ defx#do_action('execute_system')
"     nnoremap <silent><buffer><expr> yy
"                 \ defx#do_action('yank_path')
"     nnoremap <silent><buffer><expr> .
"                 \ defx#do_action('toggle_ignored_files')
"     nnoremap <silent><buffer><expr> ;
"                 \ defx#do_action('repeat')
"     nnoremap <silent><buffer><expr> h
"                 \ defx#do_action('cd', ['..'])
"     nnoremap <silent><buffer><expr> ~
"                 \ defx#do_action('cd')
"     nnoremap <silent><buffer><expr> q
"                 \ defx#do_action('quit')
"     nnoremap <silent><buffer><expr> <Space>
"                 \ defx#do_action('toggle_select') . 'j'
"     nnoremap <silent><buffer><expr> *
"                 \ defx#do_action('toggle_select_all')
"     nnoremap <silent><buffer><expr> j
"                 \ line('.') == line('$') ? 'gg' : 'j'
"     nnoremap <silent><buffer><expr> k
"                 \ line('.') == 1 ? 'G' : 'k'
"     nnoremap <silent><buffer><expr> <C-l>
"                 \ defx#do_action('redraw')
"     nnoremap <silent><buffer><expr> <C-g>
"                 \ defx#do_action('print')
"     nnoremap <silent><buffer><expr> cd
"                 \ defx#do_action('change_vim_cwd')
" endfunction
"
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

" Rust
let g:rustfmt_autosave = 1

"""""" coc.nvim """"""
" Use <cr> to confirm completion
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

nnoremap <silent> <leader>h :call CocActionAsync('doHover')<cr>
nnoremap <nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-j>"
nnoremap <nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-k>"
inoremap <nowait><expr> <C-j> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-k> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

""""""" neovide """""""
if exists("g:neovide")
    " Put anything you want to happen only in Neovide here
    set guifont=Hack:h8
    set linespace=2
    let g:neovide_hide_mouse_when_typing = v:true
    let g:neovide_confirm_quit = v:true
    let g:neovide_remember_window_size = v:true
    "let g:neovide_fullscreen = v:true
endif

" autocmd VimLeave * silent !echo -ne "\e[6 q"
